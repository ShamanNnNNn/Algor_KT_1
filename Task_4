public class MinHeap {
    private int[] heap;
    private int size;
    private int capacity;

    public MinHeap(int capacity) {
        this.capacity = capacity;
        this.size = 0;
        this.heap = new int[capacity];
    }

    public void insert(int value) {
        if (size == capacity) {
        }

        heap[size] = value;
        heapifyUp(size);
        size++;
    }

    public int peek() {
        if (size == 0) {
        }
        return heap[0];
    }

    public int extractMin() {
        if (size == 0) {
        }

        int min = heap[0];
        heap[0] = heap[size - 1];
        size--;
        heapifyDown(0);

        return min;
    }

    private void heapifyUp(int index) {
        int current = index;
        while (current > 0) {
            int parent = getParentIndex(current);
            if (heap[current] < heap[parent]) {
                swap(current, parent);
                current = parent;
            } else {
                break;
            }
        }
    }

    private void heapifyDown(int index) {
        int current = index;

        while (hasLeftChild(current)) {
            int smallerChildIndex = getLeftChildIndex(current);

            if (hasRightChild(current) && heap[getRightChildIndex(current)] < heap[smallerChildIndex]) {
                smallerChildIndex = getRightChildIndex(current);
            }

            if (heap[current] > heap[smallerChildIndex]) {
                swap(current, smallerChildIndex);
                current = smallerChildIndex;
            } else {
                break;
            }
        }
    }

    private int getParentIndex(int index) {
        return (index - 1) / 2;
    }

    private int getLeftChildIndex(int index) {
        return 2 * index + 1;
    }

    private int getRightChildIndex(int index) {
        return 2 * index + 2;
    }

    private boolean hasLeftChild(int index) {
        return getLeftChildIndex(index) < size;
    }

    private boolean hasRightChild(int index) {
        return getRightChildIndex(index) < size;
    }

    private void swap(int i, int j) {
        int temp = heap[i];
        heap[i] = heap[j];
        heap[j] = temp;
    }
}

